# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from eve_msgs/Control.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Control(genpy.Message):
  _md5sum = "ab85032e3c290005bc65df0c69df38f7"
  _type = "eve_msgs/Control"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

# Range 0 to 100, 100 is max acceleration
int8 acceleration
# Range 0 to 100, 100 is max brake
int8 brake
# Range -40 to +40, +40 is maximum left turn
int8 steering_angle

# Gear
uint8 EVE_REVERSE_GEAR=0
uint8 EVE_NEUTRAL_GEAR=1
uint8 EVE_FORWARD_GEAR=2
uint8 EVE_BOOST_GEAR=3

uint8 gear

# Indicator
uint8 EVE_INDICATOR_OFF=0
uint8 EVE_INDICATOR_LEFT=1
uint8 EVE_INDICATOR_RIGHT=2
uint8 EVE_INDICATOR_HAZARD =3

uint8 indicator

# Headlight
uint8 EVE_BEAM_OFF=0
uint8 EVE_LOW_BEAM=1
uint8 EVE_HIGH_BEAM=2

uint8 headlight

# Horn
bool horn

# Wiper
uint8 EVE_WIPER_OFF=0
uint8 EVE_WIPER_INTERMITTENT=1
uint8 EVE_WIPER_CONTINUOUS=2

uint8 wiper

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  EVE_REVERSE_GEAR = 0
  EVE_NEUTRAL_GEAR = 1
  EVE_FORWARD_GEAR = 2
  EVE_BOOST_GEAR = 3
  EVE_INDICATOR_OFF = 0
  EVE_INDICATOR_LEFT = 1
  EVE_INDICATOR_RIGHT = 2
  EVE_INDICATOR_HAZARD = 3
  EVE_BEAM_OFF = 0
  EVE_LOW_BEAM = 1
  EVE_HIGH_BEAM = 2
  EVE_WIPER_OFF = 0
  EVE_WIPER_INTERMITTENT = 1
  EVE_WIPER_CONTINUOUS = 2

  __slots__ = ['header','acceleration','brake','steering_angle','gear','indicator','headlight','horn','wiper']
  _slot_types = ['std_msgs/Header','int8','int8','int8','uint8','uint8','uint8','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,acceleration,brake,steering_angle,gear,indicator,headlight,horn,wiper

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Control, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.acceleration is None:
        self.acceleration = 0
      if self.brake is None:
        self.brake = 0
      if self.steering_angle is None:
        self.steering_angle = 0
      if self.gear is None:
        self.gear = 0
      if self.indicator is None:
        self.indicator = 0
      if self.headlight is None:
        self.headlight = 0
      if self.horn is None:
        self.horn = False
      if self.wiper is None:
        self.wiper = 0
    else:
      self.header = std_msgs.msg.Header()
      self.acceleration = 0
      self.brake = 0
      self.steering_angle = 0
      self.gear = 0
      self.indicator = 0
      self.headlight = 0
      self.horn = False
      self.wiper = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3b5B().pack(_x.acceleration, _x.brake, _x.steering_angle, _x.gear, _x.indicator, _x.headlight, _x.horn, _x.wiper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.acceleration, _x.brake, _x.steering_angle, _x.gear, _x.indicator, _x.headlight, _x.horn, _x.wiper,) = _get_struct_3b5B().unpack(str[start:end])
      self.horn = bool(self.horn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3b5B().pack(_x.acceleration, _x.brake, _x.steering_angle, _x.gear, _x.indicator, _x.headlight, _x.horn, _x.wiper))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.acceleration, _x.brake, _x.steering_angle, _x.gear, _x.indicator, _x.headlight, _x.horn, _x.wiper,) = _get_struct_3b5B().unpack(str[start:end])
      self.horn = bool(self.horn)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3b5B = None
def _get_struct_3b5B():
    global _struct_3b5B
    if _struct_3b5B is None:
        _struct_3b5B = struct.Struct("<3b5B")
    return _struct_3b5B
