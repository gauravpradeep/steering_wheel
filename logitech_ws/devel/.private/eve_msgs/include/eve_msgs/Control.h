// Generated by gencpp from file eve_msgs/Control.msg
// DO NOT EDIT!


#ifndef EVE_MSGS_MESSAGE_CONTROL_H
#define EVE_MSGS_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace eve_msgs
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : header()
    , acceleration(0)
    , brake(0)
    , steering_angle(0)
    , gear(0)
    , indicator(0)
    , headlight(0)
    , horn(false)
    , wiper(0)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , acceleration(0)
    , brake(0)
    , steering_angle(0)
    , gear(0)
    , indicator(0)
    , headlight(0)
    , horn(false)
    , wiper(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _acceleration_type;
  _acceleration_type acceleration;

   typedef int8_t _brake_type;
  _brake_type brake;

   typedef int8_t _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef uint8_t _indicator_type;
  _indicator_type indicator;

   typedef uint8_t _headlight_type;
  _headlight_type headlight;

   typedef uint8_t _horn_type;
  _horn_type horn;

   typedef uint8_t _wiper_type;
  _wiper_type wiper;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EVE_REVERSE_GEAR)
  #undef EVE_REVERSE_GEAR
#endif
#if defined(_WIN32) && defined(EVE_NEUTRAL_GEAR)
  #undef EVE_NEUTRAL_GEAR
#endif
#if defined(_WIN32) && defined(EVE_FORWARD_GEAR)
  #undef EVE_FORWARD_GEAR
#endif
#if defined(_WIN32) && defined(EVE_BOOST_GEAR)
  #undef EVE_BOOST_GEAR
#endif
#if defined(_WIN32) && defined(EVE_INDICATOR_OFF)
  #undef EVE_INDICATOR_OFF
#endif
#if defined(_WIN32) && defined(EVE_INDICATOR_LEFT)
  #undef EVE_INDICATOR_LEFT
#endif
#if defined(_WIN32) && defined(EVE_INDICATOR_RIGHT)
  #undef EVE_INDICATOR_RIGHT
#endif
#if defined(_WIN32) && defined(EVE_INDICATOR_HAZARD)
  #undef EVE_INDICATOR_HAZARD
#endif
#if defined(_WIN32) && defined(EVE_BEAM_OFF)
  #undef EVE_BEAM_OFF
#endif
#if defined(_WIN32) && defined(EVE_LOW_BEAM)
  #undef EVE_LOW_BEAM
#endif
#if defined(_WIN32) && defined(EVE_HIGH_BEAM)
  #undef EVE_HIGH_BEAM
#endif
#if defined(_WIN32) && defined(EVE_WIPER_OFF)
  #undef EVE_WIPER_OFF
#endif
#if defined(_WIN32) && defined(EVE_WIPER_INTERMITTENT)
  #undef EVE_WIPER_INTERMITTENT
#endif
#if defined(_WIN32) && defined(EVE_WIPER_CONTINUOUS)
  #undef EVE_WIPER_CONTINUOUS
#endif

  enum {
    EVE_REVERSE_GEAR = 0u,
    EVE_NEUTRAL_GEAR = 1u,
    EVE_FORWARD_GEAR = 2u,
    EVE_BOOST_GEAR = 3u,
    EVE_INDICATOR_OFF = 0u,
    EVE_INDICATOR_LEFT = 1u,
    EVE_INDICATOR_RIGHT = 2u,
    EVE_INDICATOR_HAZARD = 3u,
    EVE_BEAM_OFF = 0u,
    EVE_LOW_BEAM = 1u,
    EVE_HIGH_BEAM = 2u,
    EVE_WIPER_OFF = 0u,
    EVE_WIPER_INTERMITTENT = 1u,
    EVE_WIPER_CONTINUOUS = 2u,
  };


  typedef boost::shared_ptr< ::eve_msgs::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eve_msgs::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::eve_msgs::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::eve_msgs::Control > ControlPtr;
typedef boost::shared_ptr< ::eve_msgs::Control const> ControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eve_msgs::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eve_msgs::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eve_msgs::Control_<ContainerAllocator1> & lhs, const ::eve_msgs::Control_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.acceleration == rhs.acceleration &&
    lhs.brake == rhs.brake &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.gear == rhs.gear &&
    lhs.indicator == rhs.indicator &&
    lhs.headlight == rhs.headlight &&
    lhs.horn == rhs.horn &&
    lhs.wiper == rhs.wiper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eve_msgs::Control_<ContainerAllocator1> & lhs, const ::eve_msgs::Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eve_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eve_msgs::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eve_msgs::Control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eve_msgs::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eve_msgs::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eve_msgs::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eve_msgs::Control_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eve_msgs::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab85032e3c290005bc65df0c69df38f7";
  }

  static const char* value(const ::eve_msgs::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab85032e3c290005ULL;
  static const uint64_t static_value2 = 0xbc65df0c69df38f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::eve_msgs::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eve_msgs/Control";
  }

  static const char* value(const ::eve_msgs::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eve_msgs::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# Range 0 to 100, 100 is max acceleration\n"
"int8 acceleration\n"
"# Range 0 to 100, 100 is max brake\n"
"int8 brake\n"
"# Range -40 to +40, +40 is maximum left turn\n"
"int8 steering_angle\n"
"\n"
"# Gear\n"
"uint8 EVE_REVERSE_GEAR=0\n"
"uint8 EVE_NEUTRAL_GEAR=1\n"
"uint8 EVE_FORWARD_GEAR=2\n"
"uint8 EVE_BOOST_GEAR=3\n"
"\n"
"uint8 gear\n"
"\n"
"# Indicator\n"
"uint8 EVE_INDICATOR_OFF=0\n"
"uint8 EVE_INDICATOR_LEFT=1\n"
"uint8 EVE_INDICATOR_RIGHT=2\n"
"uint8 EVE_INDICATOR_HAZARD =3\n"
"\n"
"uint8 indicator\n"
"\n"
"# Headlight\n"
"uint8 EVE_BEAM_OFF=0\n"
"uint8 EVE_LOW_BEAM=1\n"
"uint8 EVE_HIGH_BEAM=2\n"
"\n"
"uint8 headlight\n"
"\n"
"# Horn\n"
"bool horn\n"
"\n"
"# Wiper\n"
"uint8 EVE_WIPER_OFF=0\n"
"uint8 EVE_WIPER_INTERMITTENT=1\n"
"uint8 EVE_WIPER_CONTINUOUS=2\n"
"\n"
"uint8 wiper\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::eve_msgs::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eve_msgs::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.acceleration);
      stream.next(m.brake);
      stream.next(m.steering_angle);
      stream.next(m.gear);
      stream.next(m.indicator);
      stream.next(m.headlight);
      stream.next(m.horn);
      stream.next(m.wiper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eve_msgs::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eve_msgs::Control_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "acceleration: ";
    Printer<int8_t>::stream(s, indent + "  ", v.acceleration);
    s << indent << "brake: ";
    Printer<int8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "steering_angle: ";
    Printer<int8_t>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "indicator: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.indicator);
    s << indent << "headlight: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.headlight);
    s << indent << "horn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.horn);
    s << indent << "wiper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wiper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVE_MSGS_MESSAGE_CONTROL_H
