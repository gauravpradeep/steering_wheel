// Generated by gencpp from file eve_msgs/OverrideRequest.msg
// DO NOT EDIT!


#ifndef EVE_MSGS_MESSAGE_OVERRIDEREQUEST_H
#define EVE_MSGS_MESSAGE_OVERRIDEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace eve_msgs
{
template <class ContainerAllocator>
struct OverrideRequest_
{
  typedef OverrideRequest_<ContainerAllocator> Type;

  OverrideRequest_()
    : controller()
    , type(0)  {
    }
  OverrideRequest_(const ContainerAllocator& _alloc)
    : controller(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _controller_type;
  _controller_type controller;

   typedef int8_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::eve_msgs::OverrideRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eve_msgs::OverrideRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OverrideRequest_

typedef ::eve_msgs::OverrideRequest_<std::allocator<void> > OverrideRequest;

typedef boost::shared_ptr< ::eve_msgs::OverrideRequest > OverrideRequestPtr;
typedef boost::shared_ptr< ::eve_msgs::OverrideRequest const> OverrideRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::eve_msgs::OverrideRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::eve_msgs::OverrideRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::eve_msgs::OverrideRequest_<ContainerAllocator1> & lhs, const ::eve_msgs::OverrideRequest_<ContainerAllocator2> & rhs)
{
  return lhs.controller == rhs.controller &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::eve_msgs::OverrideRequest_<ContainerAllocator1> & lhs, const ::eve_msgs::OverrideRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace eve_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::eve_msgs::OverrideRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::eve_msgs::OverrideRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::eve_msgs::OverrideRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10f3707f0a5f0ed060a0d1dbf2799eea";
  }

  static const char* value(const ::eve_msgs::OverrideRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10f3707f0a5f0ed0ULL;
  static const uint64_t static_value2 = 0x60a0d1dbf2799eeaULL;
};

template<class ContainerAllocator>
struct DataType< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eve_msgs/OverrideRequest";
  }

  static const char* value(const ::eve_msgs::OverrideRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String controller\n"
"\n"
"# 0 REQUEST_CONTROL	(Controller to Priority Switcher)\n"
"# 1 RELEASE_CONTROL	(Priority Switcher to Controller)\n"
"# 2 RESUME_CONTROL	(Priority Switcher to Controller)\n"
"# 3 CONTROLLER_EXIT	(Controller to Priority Switcher)\n"
"\n"
"int8 type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::eve_msgs::OverrideRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.controller);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OverrideRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eve_msgs::OverrideRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::eve_msgs::OverrideRequest_<ContainerAllocator>& v)
  {
    s << indent << "controller: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.controller);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EVE_MSGS_MESSAGE_OVERRIDEREQUEST_H
